#include "test.hpp"
#include <opencv2/opencv.hpp>
#include "Recipes.hpp"
#include "classificator.hpp"
#include "detectedobject.hpp"
#include "detector.hpp"

using namespace std;
using namespace cv;
using namespace cv::dnn;

const char* cmdAbout = "Sample of OpenCV usage. ";



const char* cmdOptions =
"{ i  image                             |C:/Users/temp2019/Documents/GitHub/Receptor/images/1.jpg| image to process                  }"
"{ w  width                             |300| image width for classification    }"
"{ h  heigth                            |300| image heigth fro classification   }"
"{ model_path                           |C:/Users/temp2019/Documents/GitHub/CV-SUMMER-CAMP-build/data/object_detection/common/mobilenet-ssd/caffe/mobilenet-ssd.caffemodel|}"
"{ config_path                          |C:/Users/temp2019/Documents/GitHub/CV-SUMMER-CAMP-build/data/object_detection/common/mobilenet-ssd/caffe/mobilenet-ssd.prototxt| path to model configuration}"
"{ label_path                           |        | path to class labels              }"
"{ mean                                 |""127.5 127.5 127.5""| vector of mean model values       }"
"{ swap                                 |0| swap R and B channels. TRUE|FALSE }"
"{ wCls  widthCls                             |227| image width for classification    }"
"{ hCls  heigthCls                           |227| image heigth fro classification   }"
"{ model_pathCls                           |C:/Users/temp2019/Documents/GitHub/CV-SUMMER-CAMP-build1/data/classification/squeezenet/1.1/caffe/squeezenet1.1.caffemodel|}"
"{ config_pathCls                          |C:/Users/temp2019/Documents/GitHub/CV-SUMMER-CAMP-build1/data/classification/squeezenet/1.1/caffe/squeezenet1.1.prototxt| path to model configuration}"
"{ label_pathCls                           |        | path to class labels              }"
"{ meanCls                                 |""104.0 117.0 123.0""| vector of mean model values       }"
"{ swapCls                                 |0| swap R and B channels. TRUE|FALSE }";







int main(int argc, char** argv) {


    // Parse command line arguments.
    CommandLineParser parser(argc, argv, cmdOptions);
    parser.about(cmdAbout);



    // Load image and init parameters
    String modelPath = parser.get<String>("model_path");
    String configPath = parser.get<String>("config_path");
    String labelsPath = parser.get<string>("label_path");
    int width = parser.get<int>("width");
    int height = parser.get<int>("heigth");
    Scalar mean = parser.get<Scalar>("mean");
    bool swapRB = parser.get<bool>("swap");
    double scale = 1 / 127.50223128904757;
    DnnDetector detector(modelPath, configPath, labelsPath, width, height, mean, swapRB, scale);

    String model_pathCls(parser.get<String>("model_pathCls"));
    String config_pathCls(parser.get<String>("config_pathCls"));
    String path_labelCls(parser.get<String>("label_pathCls"));
    int widthCls(parser.get<int>("widthCls"));
    int heightCls(parser.get<int>("heigthCls"));
    Scalar meanCls(parser.get<Scalar>("meanCls"));
    int swapRBCls(parser.get<int>("swapCls"));

    DnnClassificator dnn(model_pathCls, config_pathCls,
        path_labelCls, widthCls, heightCls, meanCls, swapRBCls);

    Mat prob;

    Point classIdPoint;
    double confidence;


    // Do something cool.

        String imgName(parser.get<String>("image"));
        Mat image = imread(imgName);
        vector<DetectedObject> res;
        res = detector.Detect(image);
        Mat tmp;
        Mat result;
        int classId = classIdPoint.x;

        vector<string> classifyObjects;

        for(int i = 0; i < res.size(); i++) {
            string objClass = "Class: " + std::to_string(res[i].uuid) + " " + res[i].classname;
            string conf = "Confidence: " + std::to_string(res[i].score);
            if (res[i].xLeftBottom >= 0 && res[i].yLeftBottom >= 0 && res[i].xRightTop >= 0 && res[i].yRightTop >= 0) {
                Point leftbottom(res[i].xLeftBottom, res[i].yLeftBottom);
                Point righttop(res[i].xRightTop, res[i].yRightTop);
                cout << leftbottom << " " << righttop << endl;
                Rect box(leftbottom, righttop);
                cout << objClass << " " << conf << endl;
                rectangle(image, box, Scalar(71, 99, 255), 1, 1, 0);

                    image(box).copyTo(tmp);

                    //Image classification

                    prob = dnn.Classify(tmp);
    
                    minMaxLoc(prob.reshape(1, 1), 0, &confidence, 0, &classIdPoint);

                    int classId = classIdPoint.x;
                    std::cout << "Class: " << classId << " ";
                    std::cout << "Confidence: " << confidence << '\n';

                    Mat result = tmp;

                    putText(result, "Class: " + to_string(classId), Point(30, 30), FONT_HERSHEY_COMPLEX_SMALL, 0.8, Scalar(0, 0, 250));
                    putText(result, "Confidence: " + to_string(confidence), Point(30, 60), FONT_HERSHEY_COMPLEX_SMALL, 0.8, Scalar(0, 0, 250));           

                    classifyObjects.push_back(to_string(classId));

                    imshow("win", result);
                    waitKey(0);

                    /*imwrite("C:/Users/temp2019/Documents/GitHub/Receptor/images/" + std::to_string(res.back().score) + res.back().classname + ".jpg", tmp);


                    putText(image, objClass, Size(res.back().xLeftBottom - 10, res.back().yLeftBottom - 20), FONT_HERSHEY_COMPLEX_SMALL, 1,
                        Scalar(10, 110, 255), 1, 0);
                    putText(image, conf, Size(res.back().xLeftBottom - 10, res.back().yLeftBottom - 2), FONT_HERSHEY_COMPLEX_SMALL, 1,
                        Scalar(10, 99, 255), 1, 0);
                        */
                
            }
            else {
                cout << "ERROR";
            }
        }

        cout << "\n"<< " 222";

        for (auto it : classifyObjects) {

            cout <<"\n" << it << " 222";
       }
    
        /*
    // Load image and init parameters
    String model_pathCls(parser.get<String>("model_pathCls"));
    String config_pathCls(parser.get<String>("config_pathCls"));
    String path_labelCls(parser.get<String>("label_pathCls"));
    int widthCls(parser.get<int>("widthCls"));
    int heightCls(parser.get<int>("heigthCls"));
    Scalar meanCls(parser.get<Scalar>("meanCls"));
    int swapRBCls(parser.get<int>("swapCls"));

    DnnClassificator dnn(model_pathCls, config_pathCls,
        path_labelCls, width, height, mean, swapRB);

    image = imread(imgName);
    Mat prob;
    //Image classification

    prob = dnn.Classify(image);

    //Show result
    Point classIdPoint;
    double confidence;
    minMaxLoc(prob.reshape(1, 1), 0, &confidence, 0, &classIdPoint);

    int classId = classIdPoint.x;

    std::cout << "Class: " << classId << '\n';
    std::cout << "Confidence: " << confidence << '\n';

    std::string name;

    std::ifstream in("C:/Users/temp2019/Documents/GitHub/CV-SUMMER-CAMP/data/squeezenet1.1.labels");
    int count = 0;
    if (in.is_open())
    {
        while (getline(in, name))
        {
            if (count == classId)
            {
                break;
            }
            count++;

        }
    }
    in.close();



    Mat result = image;
    putText(result, "Class: " + to_string(classId), Point(30, 30), FONT_HERSHEY_COMPLEX_SMALL, 0.8, Scalar(0, 0, 250));
    putText(result, "Confidence: " + to_string(confidence), Point(30, 60), FONT_HERSHEY_COMPLEX_SMALL, 0.8, Scalar(0, 0, 250));
    putText(result, name, Point(30, 90), FONT_HERSHEY_COMPLEX_SMALL, 0.8, Scalar(0, 0, 250));

    imshow("image", result);
    waitKey();

    /*
    HELLO();

    Recipes data;

    vector<string> tmp;
    tmp.push_back("fig");
    tmp.push_back("pepper");
    data.SetMenu("C:\\Users\\temp2019\\Documents\\GitHub\\Receptor-build\\recipes\\1_recipes.txt");
    data.Show(data.menu);
    vector<string> res;
    res = data.FindDish(tmp, 2);

    
    for (auto tmp : res) {
        cout << tmp <<" ";
    }
    
    data.Show(data.result);
    */
    

	return 0;
}